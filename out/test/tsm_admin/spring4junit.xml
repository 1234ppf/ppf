<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jee="http://www.springframework.org/schema/jee" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"
    
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
    http://www.springframework.org/schema/jee 
    http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
    default-autowire="byName">
	<description>SpringConfig</description>
	<context:property-placeholder location="classpath:db.properties, classpath:project_config.properties,classpath:mongo.properties"/>

	
	<context:component-scan base-package="com.xframe.framework,com.molisc.mobileserver,com.xframe..*service,com.xframe..*dao,
	       com.tt.project,com.infindo.push,com.moliscwebos.project.payment.。*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
    <bean id="ApplicationEventListener" class="com.xframe.framework.base.service.ApplicationEventListener"></bean>
	
	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass"><value>${db.drivers}</value></property>
        <property name="jdbcUrl"><value>${db.url}</value></property>
        <property name="user"><value>${db.user}</value></property>
        <property name="password"><value>${db.password}</value></property>
	    <property name="acquireIncrement" value="1"></property>  
	    <property name="initialPoolSize" value="3"></property>  
	    <property name="maxIdleTime" value="60"></property>  
	    <property name="maxPoolSize" value="${db.maxPoolSize}"></property>
	    <property name="minPoolSize" value="${db.minPoolSize}"></property>  
	    <property name="acquireRetryDelay" value="1000"></property>  
	    <property name="acquireRetryAttempts" value="60"></property>  
	    <property name="breakAfterAcquireFailure" value="false"></property>  
    </bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${db.dialect}</prop>
				<prop key="hibernate.show_sql">${db.show_sql}</prop>
				<prop key="hibernate.autoReconnect">true</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.connection.provider_class">org.hibernate.connection.C3P0ConnectionProvider</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">/ehcache-hibernate.xml</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.xframe.**.entity,com.tt.project.**.entity,com.infindo.push.entity,com.moliscwebos.project.payment.bo"/>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
				</entry>
			</map>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" autowire="byName"/>
	
	<aop:config>
      <aop:advisor id="transactionInterceptor1"  pointcut="execution(* com.xframe..*service.*.*(..))" advice-ref="txAdvice"/>
      <aop:advisor id="transactionInterceptor2"  pointcut="execution(* com.tt..*service..*.*(..))" advice-ref="txAdvice"/>
      <aop:advisor id="transactionInterceptor3"  pointcut="execution(* com.infindo.push..*service.*.*(..))" advice-ref="txAdvice"/>
       <aop:advisor id="transactionInterceptor4"  pointcut="execution(* com.moliscwebos.project.payment..*service.*.*(..))" advice-ref="txAdvice"/> 
      
	  <aop:aspect id="optimisticOperationRetry" ref="optimisticOperationExecutor">
		<aop:around pointcut="execution(* com.xframe.framework..*service.*.*(..))" method="doOptimisticOperation" />
		<aop:around pointcut="execution(* com.tt..*service..*.*(..))" method="doOptimisticOperation" />
        <aop:around pointcut="execution(* com.infindo.push..*service.*.*(..))" method="doOptimisticOperation" />
		
		
		
	  </aop:aspect>      
	</aop:config>
	
	<bean id="optimisticOperationExecutor" class="com.xframe.framework.spring.mvc.interceptor.OptimisticOperationExecutor">
		<property name="maxRetries" value="3" />
		<property name="order" value="100" />
	</bean>
	
	<tx:advice id="txAdvice" > 
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*Save" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="clear*" propagation="REQUIRED" no-rollback-for="Exception"/>
            <tx:method name="exist*" propagation="REQUIRED" rollback-for="Exception"/>

            <tx:method name="transfer*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="notify*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="reset*" propagation="REQUIRED" rollback-for="Exception"/>

			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>  
	
	<tx:annotation-driven/>
	
    
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>project_message</value>
				<value>project_config</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage">
			<value>true</value>
		</property>
	</bean>
	
	
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg type="java.util.Properties">
                    <props>
                        <prop key="kaptcha.border">yes</prop>
                        <prop key="kaptcha.image.width">118</prop>
                        <prop key="kaptcha.image.height">50</prop>
                        <prop key="kaptcha.textproducer.char.string">0123456789</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.noise.color">white</prop>
                        <prop key="kaptcha.textproducer.font.color">black</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
	
	<bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPath" value="classpath:/emailTemplate" />
    </bean>
    


    <!-- 系统常量 -->
    <bean id="appConfig" class="com.tt.project.config.AppConfig">
        <property name="repoPath">
            <value>${repository.path}</value>
        </property>
        <property name="userPicPath">
            <value>${user.pic}</value>
        </property>
        <property name="userContentPath">
            <value>${user.content}</value>
        </property>
        <property name="userAvatarPath">
            <value>${user.avatar}</value>
        </property>
        <property name="imageMagickPath">
            <value>${imagemagick.path}</value>
        </property> 
        <property name="uploadPath">
            <value>${upload.path}</value>
        </property> 



        <property name="eventNewsPath">
            <value>${event.news}</value>
        </property> 
        
        <property name="eventBoothPath">
            <value>${event.booth}</value>
        </property> 
         <property name="eventMerchantPath">
            <value>${event.merchant}</value>
        </property>
        
        <property name="eventGuestPath">
            <value>${event.guest}</value>
        </property> 
        
        <property name="eventServicesPath">
            <value>${event.services}</value>
        </property> 
        
        <property name="eventFloorPath">
            <value>${event.floor}</value>
        </property> 
        
        <property name="eventFilesPath">
            <value>${event.files}</value>
        </property> 
        
         <property name="eventSponsorPath">
            <value>${event.sponsor}</value>
        </property> 

        <property name="xqbFundCode">
            <value>${goodsInfo.fundCode.xqb}</value>
        </property> 

    </bean>    
    
    
    <bean id="emailSender" class="com.tt.project.service.common.EmailSenderImpl" >
        <property name="host">
            <value>${mail.host}</value>
        </property>
        <property name="port">
            <value>${mail.port}</value>
        </property>
        <property name="username">
            <value>${mail.username}</value>
        </property>
        <property name="password">
            <value>${mail.password}</value>
        </property>
     
        <property name ="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
                <prop key="mail.smtp.port">${mail.port}</prop>
                <prop key="mail.smtp.socketFactory.port">${mail.port}</prop>
                <prop key="mail.smtp.socketFactory.fallback">false</prop>
                <!-- 
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                 -->
                <prop key="mail.smtp.starttls.enable">${mail.smtp.ssl}</prop>
            </props>
        </property>  

    </bean>
    
    
</beans>